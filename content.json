{"meta":{"title":"张荩尧的博客","subtitle":"愿青年人一扫颓气 奋力向前","description":null,"author":"Kiro_11","url":"https://kirozhang1997.github.io"},"pages":[],"posts":[{"title":"C++ note_1","slug":"C++note_1","date":"2017-11-27T13:36:50.000Z","updated":"2017-11-27T13:38:27.000Z","comments":true,"path":"2017/11/27/C++note_1/","link":"","permalink":"https://kirozhang1997.github.io/2017/11/27/C++note_1/","excerpt":"","text":"选用数据类型时的建议：12341.明确符号不可能为负时选unsigned类型2.整数运算时选int/long long(C++ 11新定义)3.算术表达式中不要用char或bool：char有无符号在不同机器上定义不同4.浮点运算使用double，计算代价与float相比差不多甚至更快 字符串比“看起来相同的字符”多一位，如’A’占一位，“A”占两位，因为在编译器中字符串末尾多加了’\\0’ “对象”指一块能储存数据并具有某种类型的内存空间“变量”是一个具名的、可供程序操作的存储空间 初始化和赋值是完全不同的操作！！初始化是创建变量时赋予其一个初始值，赋值是把对象的当前值擦除，用一个新值替代 i++和++i的区别：1234int i &#123;0&#125;; int a = i ++ 等价于a = i ; i = i + 1；int a = ++ i 等价于 i = i + 1 ；a = i; i++无法做左值；++i可以做左值 C++11新标准：茴有四种写法✧(≖ ◡ ≖)哦不初始化变量有四种方式：1234int a = 0; int a = &#123;0&#125;; int a &#123;0&#125;; int a (0); 如果内置类型的变量未被显示初始化，如果其在函数外，则初始化为0；如果其在函数体内，则为未定义值（未被初始化），会被引起错误。每个类各自决定其初始化对象的方式，包括是否需要初始化和初始化的值.","categories":[],"tags":[]},{"title":"C++:关于常量const","slug":"About_const_2","date":"2017-11-27T12:20:18.000Z","updated":"2017-11-27T13:41:47.000Z","comments":true,"path":"2017/11/27/About_const_2/","link":"","permalink":"https://kirozhang1997.github.io/2017/11/27/About_const_2/","excerpt":"","text":"指向常量的指针（pointer to const）不能用于改变其指向对象的值，但可以指向一个非常量对象123456const int a = 66;int *ptr_a = &amp;a; //错误，因为类型不符const int *ptr_a = &amp;a; //正确int b = 77;const int *ptr_b = &amp;b; //正确，常量指针可以指向非常量对象 常量指针（const pointer）和指向常量的指针是不同的概念。常量指针是指把指针定义为常量，常量指针必须初始化，而且一旦初始化就不能改变。12345int a = 233;int *const ptr_a = &amp;a; //ptr_a将一直指向aconst double pi = 3.1415926;const double *const ptr_pi = &amp;pi; //ptr_pi是指向常量pi的常量指针 指针本身是常量不意味着不能通过指针修改其所指对象的值，能否这样做只依赖于其所指对象的类型。123*ptr_pi = 8844.43; //错误，因为*ptr_pi所指的pi是一个常量*ptr_a = 666; //正确，a不是常量 顶层常量（top-level const)与底层常量(low-level const)顶层常量：指针本身是常量；底层常量：指针指向的对象是常量1234567int top = 80;int *const ptr_top = &amp;top; //ptr_top是顶层常量，不能改变ptr_top的值const int low = 90;const int *ptr_low = &amp;low; //ptr_low是底层常量，不能改变*ptr_low的值const int *const ptr_tl = ptr_low; //ptr_tl既是顶层常量又是底层常量","categories":[],"tags":[]},{"title":"C++:关于复合类型","slug":"CompositeDataType","date":"2017-11-27T07:33:36.000Z","updated":"2017-11-27T13:41:39.000Z","comments":true,"path":"2017/11/27/CompositeDataType/","link":"","permalink":"https://kirozhang1997.github.io/2017/11/27/CompositeDataType/","excerpt":"","text":"复合类型有两种：引用和指针；引用（reference）为对象起了一个新名字（不是新建对象），通过将声明符写成&amp;d的形式来定义引用类型，d是声明的变量名。12int ra =100;int &amp;ref_ra = ra; //ref_ra引用到ra 在变量初始化时，新建对象的赋值是相当于拷贝（copy），而引用的赋值是绑定（bind），绑定无法同被绑对象解除，因此引用必须初始化；以引用作为初始值，相当于以被引用对象的值作为初始值；因为引用不是对象，所以不能定义引用的引用（但可以定义指针的指针）。123int ref_ra = 200; //等价于 ra = 200int rb = ref_ra; //等价于 rb = raint &amp;ref_ref_ra = ref_a; //错误，不能定义引用的引用 引用类型必须与被绑定对象严格匹配（除了const），并不能直接引用计算结果。1int &amp;ref_rb = 200; //错误，无法直接引用计算结果 指针（pointer）也是一种实现对其他对象间接访问的复合数据类型。指针自身也是一个对象，所以指针可以直接赋值和拷贝。指针实际上是一段内存地址，这个地址存放了指针所指对象的数据；获取对象的地址需要使用取址符&amp;指针是C/C++初学者的噩梦(*。&gt;Д&lt;)12int pa = 2333;int *ptr_pa = &amp;pa; //指针ptr_pa存放变量pa的地址，即ptr_pa指向pa 和引用相同，指针必须和被指向对象类型严格匹配（同样除去const这一情况）。 茴字有四种写法，指针也有四种状态：12341.指向一个对象2.指向紧邻对象所占空间的下一位置3.空指针，没有指向任何对象4.无效指针，不属于上面三种情况的就是这种状态（真是废话） 虽然逻辑上这个分类有点扯淡，但是无效指针引发的bug是实打实的，因为编译器无法识别无效指针的bug，所以使用指针时要头脑清醒。 使用指针访问对象：使用解引用符*来实现12int pb = 666;int *ptr_pb = &amp;pb; //等价于指针ptr_pb指向对象pb；ptr=pb的内存地址；*ptr_pb=pb 划重点了，虽然C++的符号表中并未写明，但*与&amp;这两个符号在声明中和在表达式中有不同的意义：1234int i = 99;int &amp;ref_i = i; //&amp;用于声明int *ptr_i = &amp;i; //*用于声明，&amp;用于取地址int &amp;ref_ptr_i = *ptr_i; //&amp;用于声明，*用于解除引用 空指针（null pointer）是不指向任何对象的指针，定义空指针有三种方法：123int *ptr_k1 = nullptr; //C++11新标准中的新写法，推荐使用此种；nullptr是一种特殊类型的字面值，可以被转换成任意其他的指针类型int *ptr_k2 = 0; int *ptr_k3 = NULL; //NULL是C++中的预处理变量，在cstdlib.h中定义，NULL = 0； 注意，虽然定义空指针时的右值等价于0，但是不能将0的int形式赋给指针：12int *ptr_l;ptr_l = 0; //错误，不能把int变量直接赋值给指针 又要划重点了，虽然指针未初始化不会引发语法错误，但是极容易造成程序崩溃，这种错误在debug时非常棘手；因为未经初始化的指针所占内存空间的当前内容将被看做一个地址值，相当于要去访问一个不存在位置的不存在对象（对象什么的，不存在的）；比没对象更糟糕的是，指针所占的内存空间恰好能被当做内存地址，就会造成合法性判断的混淆。所以，请务必初始化指针，不晓得指针指向何处的话就先将其初始化为nullptr吧(๑•̀ㅂ•́)و✧","categories":[],"tags":[]}]}